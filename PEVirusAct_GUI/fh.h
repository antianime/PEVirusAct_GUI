#pragma once

#include<iostream>
#include<windows.h>
#include<fileapi.h>
#include<vector>

#include <QtWidgets/QMainWindow>
#include <QFileDialog>
#include <QStandardItem>
#include<QScrollBar>
#include<QInputDialog>
#include<QMessageBox>



using namespace std;

//FileHeaderTamper : Object
#define DOS_T 1     // DOS头篡改
#define NT_T 2      // NT头篡改

//FileHeaderTamper : DOS - Decision
//#define 

//FileHeaderTamper : NT - Decision
#define e_magic_T 1     // 修改PE签名
#define e_lfanew_T 2    // 修改指向PE头的偏移量


// 字段信息结构体
typedef struct FieldInfo
{
    std::string field;  // 字段名称
    int size;           // 字段大小(字节)
    unsigned long long offset;         // 字段偏移量
}FieldInfo;

//std::vector< FieldInfo>IMAGE_DOS_HEADER_INFO;

//std::vector<std::tuple<std::string, int, int>>IMAGE_DOS_HEADER_INFO[19];
//std::vector<std::tuple<std::string, int, int>>IMAGE_NT_HEADER_INFOS[];


// DOS存根结构体（64字节）
typedef struct IMAGE_DOS_STUB
{
    BYTE stub[64];      // DOS存根数据
}IMAGE_DOS_STUB;


//RICH_HEADER;
//extern char* stubbuffer;
//extern const std::vector<std::vector<FieldInfo>>ALL_HEADERS_INFO;
extern const std::vector< FieldInfo>IMAGE_DOS_HEADER_INFO;
//extern const std::vector< FieldInfo>IMAGE_NT_HEADERS_INFO;

extern const std::vector< FieldInfo>IMAGE_SECTION_HEADERS_INFO;





//会打开一个计算器
const uint8_t shellcode[512] = {
    0x48, 0x89, 0x5C, 0x24, 0x18, 0x48, 0x89, 0x7C, 0x24, 0x20, 0x55, 0x41, 0x56, 0x41, 0x57, 0x48,
    0x8B, 0xEC, 0x48, 0x83, 0xEC, 0x50, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x33,
    0xFF, 0xC7, 0x45, 0xF0, 0x47, 0x65, 0x74, 0x50, 0x44, 0x8B, 0xCF, 0xC7, 0x45, 0xF4, 0x72, 0x6F,
    0x63, 0x41, 0xC7, 0x45, 0xF8, 0x64, 0x64, 0x72, 0x65, 0x48, 0x8B, 0x48, 0x18, 0x66, 0xC7, 0x45,
    0xFC, 0x73, 0x73, 0xC6, 0x45, 0xFE, 0x00, 0x48, 0x8B, 0x41, 0x20, 0x48, 0x8B, 0x08, 0x48, 0x8B,
    0x01, 0x4C, 0x8B, 0x78, 0x20, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 0x8B,
    0x48, 0x18, 0x48, 0x8B, 0x41, 0x20, 0x48, 0x8B, 0x08, 0x48, 0x8B, 0x01, 0x4C, 0x8B, 0x50, 0x20,
    0x49, 0x63, 0x42, 0x3C, 0x46, 0x8B, 0xB4, 0x10, 0x88, 0x00, 0x00, 0x00, 0x4D, 0x03, 0xF2, 0x41,
    0x8B, 0x5E, 0x18, 0x85, 0xDB, 0x74, 0x74, 0x48, 0x89, 0x74, 0x24, 0x78, 0x41, 0x8B, 0x76, 0x20,
    0x45, 0x8B, 0xD9, 0x48, 0x8D, 0x4D, 0xF0, 0x4A, 0x8D, 0x04, 0x9E, 0x42, 0x8B, 0x04, 0x10, 0x49,
    0x03, 0xC2, 0x0F, 0xB6, 0x10, 0x84, 0xD2, 0x74, 0x23, 0x0F, 0x1F, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x44, 0x0F, 0xB6, 0x01, 0x45, 0x84, 0xC0, 0x74, 0x13, 0x41, 0x3A, 0xD0, 0x75, 0x0E, 0x0F, 0xB6,
    0x50, 0x01, 0x48, 0xFF, 0xC0, 0x48, 0xFF, 0xC1, 0x84, 0xD2, 0x75, 0xE4, 0x0F, 0xB6, 0x09, 0x38,
    0x08, 0x74, 0x0A, 0x41, 0xFF, 0xC1, 0x44, 0x3B, 0xCB, 0x72, 0xB5, 0xEB, 0x19, 0x41, 0x8B, 0x4E,
    0x24, 0x49, 0x03, 0xCA, 0x42, 0x0F, 0xB7, 0x14, 0x59, 0x41, 0x8B, 0x4E, 0x1C, 0x49, 0x03, 0xCA,
    0x8B, 0x3C, 0x91, 0x49, 0x03, 0xFA, 0x48, 0x8B, 0x74, 0x24, 0x78, 0x48, 0x8D, 0x55, 0xE0, 0xC7,
    0x45, 0xE0, 0x4C, 0x6F, 0x61, 0x64, 0x49, 0x8B, 0xCF, 0xC7, 0x45, 0xE4, 0x4C, 0x69, 0x62, 0x72,
    0xC7, 0x45, 0xE8, 0x61, 0x72, 0x79, 0x41, 0xC6, 0x45, 0xEC, 0x00, 0xFF, 0xD7, 0x48, 0x8D, 0x55,
    0x20, 0xC7, 0x45, 0x20, 0x57, 0x69, 0x6E, 0x45, 0x49, 0x8B, 0xCF, 0xC7, 0x45, 0x24, 0x78, 0x65,
    0x63, 0x00, 0xC7, 0x45, 0xD0, 0x63, 0x61, 0x6C, 0x63, 0xC7, 0x45, 0xD4, 0x2E, 0x65, 0x78, 0x65,
    0xC6, 0x45, 0xD8, 0x00, 0xFF, 0xD7, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x4D, 0xD0, 0xFF,
    0xD0, 0x4C, 0x8D, 0x5C, 0x24, 0x50, 0x33, 0xC0, 0x49, 0x8B, 0x5B, 0x30, 0x49, 0x8B, 0x7B, 0x38,
    0x49, 0x8B, 0xE3, 0x41, 0x5F, 0x41, 0x5E, 0x5D, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


QString StdStringToStructHexQString(std::string str);